# -*- coding: utf-8 -*-
"""egenV1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EjThiYd3FCYC2rtB5LxviOrvw74J37LD
"""

import urllib.request, urllib.parse
from urllib.error import HTTPError,URLError
import pandas as pd
import json
import sqlite3
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

# Fetching data from URL:
def get_data(url):
  try:
      uh = urllib.request.urlopen(url)
  except HTTPError as e:
      print("Sorry! Could not retrieve anything on {}".format(url))
      return None
  except URLError as e:
      print('Failed to reach a server.')
      print('Reason: ', e.reason)
      return None
  else:
      data = uh.read().decode()
      data = json.loads(data)
      data = data['data']
      return data

# setting up data for different counties into a dataframe
def set_data(anylist):
    county = []
    for l in anylist:
        county_dict = {'County':l[9],"Test Date": l[8], "New Positives": l[10], "Cumulative Number of Positives": l[11], "Total Number of Tests Performed": l[12], "Cumulative Number of Tests Performed": l[13]}
        county.append(county_dict)

    df = pd.DataFrame(county).groupby(['County'])
    return df

# creating a connection in sqlite3
def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except sqlite3.Error as e:
        print(e)

    return conn

# loading data into sqlite3
def load_database(df):
  database = r"sqlite\db\pythonsqlite.db"
  conn = create_connection(database)
  for d,df2 in df:
    df2 = df2.reset_index().drop(['index'], axis=1)
    df2.to_sql(d, conn, if_exists='replace')
    pd.set_option('display.max_columns', None)
    print(d,"\n",df2.reset_index().drop(['index'], axis=1))
  conn.close()

# incase of manual testing of results based on bronx county
def test_results():
    con = sqlite3.connect("sqlite\db\pythonsqlite.db")
    df = pd.read_sql_query("SELECT * from Bronx", con)
    pd.set_option('display.max_columns', None)
    print(df)
    con.close()

# defining the flow of the code
def main():
  serviceurl = 'https://health.data.ny.gov/api/views/xdss-u53e/rows.json?accessType=DOWNLOAD'
  County_data = get_data(serviceurl)
  dataframe = set_data(County_data)
  LoadintoSQL = load_database(dataframe)

if __name__=='__main__':
  main()
  ## If you need to test results for just Bronx county in db uncomment below line
  
  # print("Test Results \n", test_results())












